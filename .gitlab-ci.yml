variables:
  BUILDENV_NATIVE_IMAGE: gnutls/nettle-build-images:buildenv-native
  BUILDENV_CLANG_IMAGE: gnutls/nettle-build-images:buildenv-clang
  BUILDENV_CROSS_IMAGE: gnutls/nettle-build-images:buildenv-cross
  GET_SOURCES_ATTEMPTS: "3"

# "Native" means x86-64; no jobs run on anything else.
.native-build:
  image: $CI_REGISTRY/$BUILDENV_NATIVE_IMAGE
  script:
  - ./.bootstrap
  - './configure $EXTRA_CONFIGURE_ARGS --disable-documentation'
  - 'make -j$(nproc)'
  - 'make -j$(nproc) check $EXTRA_CHECK_TARGET'
  tags:
  - shared
  - linux
  except:
  - tags
  variables:
    NETTLE_TEST_SEED: '0'
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - "config.log"

native/fat:
  extends: .native-build
  variables:
    EXTRA_CHECK: check-fat

native/no-fat:
  extends: .native-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--disable-fat'

native/no-static:
  extends: .native-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--disable-static'

native/no-shared:
  extends: .native-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--disable-static'

native/32-bit:
  extends: .native-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--enable-mini-gmp'
    CC: 'gcc -m32'
    CXX: '/bin/false'

native/mini-gmp:
  extends: .native-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--enable-mini-gmp'

native/c89:
  extends: .native-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--disable-assembler'
    CC: '$CI_PROJECT_DIR/misc/c89'

native/extra-asserts:
  extends: .native-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--enable-extra-asserts'

native/ndebug:
  extends: .native-build
  variables:
    EXTRA_CONFIGURE_ARGS: 'CPPFLAGS=-DNDEBUG --disable-assembler'

native/ubsan:
  extends: .native-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--disable-assembler'
    CFLAGS: '-fsanitize=undefined -fno-sanitize-recover -g -O2'
    CXXFLAGS: '-fsanitize=undefined -fno-sanitize-recover -g -O2'

native/asan:
  extends: .native-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--disable-assembler'
    CFLAGS: '-fsanitize=address -g -O2'
    CXXFLAGS: '-fsanitize=address -g -O2'

build/static-analyzers:
  image: $CI_REGISTRY/$BUILDENV_CLANG_IMAGE
  script:
  - ./.bootstrap
  - scan-build ./configure --disable-documentation --disable-assembler
  - scan-build --status-bugs -o scan-build-lib make -j$(nproc)
  tags:
  - shared
  - linux
  except:
  - tags
  artifacts:
    expire_in: 1 week
    when: on_failure
    paths:
      - scan-build-lib/*

build/gnutls:
  image: $CI_REGISTRY/$BUILDENV_NATIVE_IMAGE
  script:
  - ./.bootstrap &&
    ./configure --disable-documentation --prefix="$(pwd)/local" --libdir="$(pwd)/local/lib" &&
    make -j4 && make install
  - git clone --depth 1 --branch master https://gitlab.com/gnutls/gnutls.git gnutls-git
  - cd gnutls-git && git submodule update --init && ./bootstrap &&
    ./configure PKG_CONFIG_PATH="$(pwd)/../local/lib/pkgconfig" CPPFLAGS="-I$(pwd)/../local/include"
      LDFLAGS="-L$(pwd)/../local/lib -Wl,-rpath,$(pwd)/../local/lib"
      --disable-cxx --disable-guile --without-p11-kit --disable-doc &&
    make -j$(nproc) && make -j $(nproc) check
  tags:
  - shared
  - linux
  except:
  - tags
  artifacts:
    expire_in: 1 week
    when: on_failure
    paths:
      - gnutls-git/guile/tests/*.log
      - gnutls-git/tests/*.log
      - gnutls-git/*.log
      - gnutls-git/tests/*/*.log
      - gnutls-git/tests/suite/*/*.log

remote/s390x:
  image: $CI_REGISTRY/$BUILDENV_NATIVE_IMAGE
  before_script:
  # File created as world-readable by gitlab ci machinery.
  - chmod 0600 $SSH_PRIVATE_KEY
  - ssh -o 'StrictHostKeyChecking no' -i "$SSH_PRIVATE_KEY" "$S390X_ACCOUNT"
    "mkdir -p ci-work/$CI_PIPELINE_IID"
  script:
  - echo $CI_PIPELINE_IID
  - ./.bootstrap &&
    ./configure && make PACKAGE_VERSION=snapshot dist &&
      ls -l *.tar.gz
  - cat nettle-snapshot.tar.gz |
    ssh -o 'StrictHostKeyChecking no' -i "$SSH_PRIVATE_KEY" "$S390X_ACCOUNT"
    "cd ci-work/$CI_PIPELINE_IID && tar xzf -"
  - ssh -o 'StrictHostKeyChecking no' -i "$SSH_PRIVATE_KEY" "$S390X_ACCOUNT"
    "cd ci-work/$CI_PIPELINE_IID/nettle-snapshot && ./configure --disable-documentation --enable-s390x-msa"
  - ssh -o 'StrictHostKeyChecking no' -i "$SSH_PRIVATE_KEY" "$S390X_ACCOUNT"
    "cd ci-work/$CI_PIPELINE_IID/nettle-snapshot && make"
  - ssh -o 'StrictHostKeyChecking no' -i "$SSH_PRIVATE_KEY" "$S390X_ACCOUNT"
    "cd ci-work/$CI_PIPELINE_IID/nettle-snapshot && NETTLE_TEST_SEED=0 make check"
  after_script:
  - ssh -o 'StrictHostKeyChecking no' -i "$SSH_PRIVATE_KEY" "$S390X_ACCOUNT"
    "rm -rf ci-work/$CI_PIPELINE_IID"
  only:
    variables:
    - $SSH_PRIVATE_KEY != ""
    - $S390X_ACCOUNT != ""
  tags:
  - shared
  - linux
  except:
  - tags

.cross-build:
  image: $CI_REGISTRY/$BUILDENV_CROSS_IMAGE
  script:
  - build=$(dpkg-architecture -qDEB_HOST_GNU_TYPE)
  - host="${CI_JOB_NAME#cross/}"
  # Not setting CC_FOR_BUILD paired with qemu-user/binfmt somehow causes
  # config.guess to detect the target as the build platform and not activate
  # cross-compile mode, even though --build is given.
  - export CC_FOR_BUILD="gcc"
  - export CC="$host-gcc"
  # Disable C++, to not depend on cross g++.
  - export CXX=/bin/false
  - ./.bootstrap
  - ./configure --disable-documentation $EXTRA_CONFIGURE_ARGS --build=$build --host=$host
  - make -j$(nproc)
  - make EMULATOR=${EMULATOR} -j$(nproc) check
  - make EMULATOR=${EMULATOR} -j$(nproc) check-fat
  tags:
  - shared
  - linux
  except:
  - tags
  variables:
    NETTLE_TEST_SEED: '0'
  artifacts:
    expire_in: 1 week
    when: always
    paths:
    - "config.log"

cross/arm-linux-gnueabihf:
  extends: .cross-build
  variables:
    EMULATOR: qemu-arm

cross/aarch64-linux-gnu:
  extends: .cross-build
  variables:
    EMULATOR: qemu-aarch64

# Setting QEMU_LD_PREFIX works around the error "qemu-ppc64: Could not
# open '/lib64/ld64.so.1".
cross/powerpc64-linux-gnu:
  extends: .cross-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--enable-mini-gmp'
    QEMU_LD_PREFIX: /usr/powerpc64-linux-gnu
    EMULATOR: qemu-ppc64

cross/powerpc64le-linux-gnu:
  extends: .cross-build
  variables:
    EMULATOR: qemu-ppc64le

# Disable assembly files, because current qemu doesn't support all
# needed instructions.
cross/s390x-linux-gnu:
  extends: .cross-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--disable-assembler'
    EMULATOR: qemu-s390x

cross/sparc64-linux-gnu:
  extends: .cross-build
  variables:
    EXTRA_CONFIGURE_ARGS: '--enable-mini-gmp'
    QEMU_LD_PREFIX: /usr/sparc64-linux-gnu
    EMULATOR: qemu-sparc64
